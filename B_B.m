%Optimal scheduling for satellite refuelling in circular orbits
%orbits,无视下降段，并将前后的恒稳段拼接起来，具体见论文里面
%经过检验，该分支定界法与case1~4的结果相同，该程序的作用相当于在linprog的基础上计算0-1整数规划问题
tic
t=15.6;
C=[0.371043109763517,0.194240766432974,0.131509636543938,0.0994071864409513,0.0799027567882164;
    0.167374875253123,0.0854731831138398,0.0573918067366742,0.0431993665575355,0.0346321617124309;
    0.510980712428810,0.272067662600813,0.185417744397931,0.140630695678828,0.113256628919672;
    3.43972234203293,1.20319833414343,0.729926229368571,0.524130094759198,0.408913817024088;
    0.167374875253123,0.0854731831138398,0.0573918067366742,0.0431993665575355,0.0346321617124309;
    0.322080155289604,0.167522476496861,0.113207839463382,0.0854911082787013,0.0686771963154889;
    0.167374875253123,0.0854731831138398,0.0573918067366742,0.0431993665575355,0.0346321617124309];
C2=C;   %C是燃料消耗，为第一个卫星加注时的第一个恒稳区间的燃料消耗
C4=C;


C=C';
C=C( : );  %a，b不等式约束 ,此处考虑怎么将总的时间与xij联系起来  a1，a2分别为恒稳区间的起始和结束时间组成的矩阵
a1=[0.124817879056482,1.85806672641619,2.92806672641619,3.95806672641619,4.97806672641619;
     0.124817879056482,1.79481787905648,2.86481787905648,3.90481787905648,4.92481787905648;
     0.124817879056482,1.90183432667991,2.97183432667991,4.00183432667991,5.02183432667991;
     0.124817879056482,1.21417292565663,2.37417292565663,3.41417292565663,4.43417292565663;
     0.124817879056482,1.79481787905648,2.86481787905648,3.90481787905648,4.92481787905648;
     0.124817879056482,1.83885779785416,2.90885779785416,3.93885779785416,4.95885779785416;
     0.124817879056482,1.79481787905648,2.86481787905648,3.90481787905648,4.92481787905648];
 A1=a1;   %A用作后面分支定界法判断时间是否出界
 A_old=a1;
 A111=a1;
 a2=[1.85806672641619,2.92806672641619,3.95806672641619,4.97806672641619,5.98806672641619;
     1.79481787905648,2.86481787905648,3.90481787905648,4.92481787905648,5.93481787905648;
     1.90183432667991,2.97183432667991,4.00183432667991,5.02183432667991,6.03183432667991;
     1.21417292565663,2.37417292565663,3.41417292565663,4.43417292565663,5.44417292565663;
     1.79481787905648,2.86481787905648,3.90481787905648,4.92481787905648,5.93481787905648;
     1.83885779785416,2.90885779785416,3.93885779785416,4.95885779785416,5.97885779785416;
     1.79481787905648,2.86481787905648,3.90481787905648,4.92481787905648,5.93481787905648];
A2=a2;
a1=a1';
row=size(C2,1);
col=size(C2,2);
a1=reshape(a1,[1,row*col]);
a2=-a2';
a2=reshape(a2,[1,row*col]);
a=[a1;a2];
b=[t,-t];   %这里的240是真实时间，单位是小时，除此以外其它燃耗，时间都是归一化以后的
Aeq=zeros(row,col);
for i=1:row
   for j=(i-1)*col+1:col*i
      Aeq(i,j)=1;       %Ae，Be为等式约束，前5行表示一个人只做一种工作，这里不需要后五行，后五行表示每一种工作只需要一个人做
   end
end
Beq=ones(row,1);
%lb，ub上下界
lb=zeros(row*col,1);
ub=ones(row*col,1);
for i=1:row*col
    intcon(i)=i;
end
% [x,z]=intlinprog(C,intcon,a,b,Aeq,Beq,lb,ub);
[x,z]=linprog(C,a,b,Aeq,Beq,lb,ub);
x=reshape(x,[col,row]);
x=x';
X=x;
y=round(reshape(x,[col,row]));   
y=y';

%当使用linprog函数时，从此之下应该使用整数规划，分支定界法
%首先获得解矩阵中每个解中小数的个数，即确定总共有多少种情况

t1=t;
Z1=1000;
Z=[0,Z1];
Z3=0;
for i=1:size(x,1)
    cn=1;
    cm=1;
    if (size(C2,1)==1)
                for k=1:size(C2,2)
                    if (A1(1,k)<t1)&&(A1(1,k+1)>t1)
                        cn=k;
                        Z2=C2(1,k);
                        Z1=Z1+C2(1,k);
                    end
                end
    else
     for j=1:size(x,2)
        if ((x(i,j)>0.1)&&(x(i,j)<=1))
            
            C3=C2;
            C3(1,:)=[];
            C3=C3';
            C3=C3( : );
            A11=A1;
            A11(1,:)=[];
            A22=A2;
            A22(1,:)=[];
            A11=A11';
            row1=size(C2,1);
            col1=size(C2,2);
            A11=reshape(A11,[1,(row1-1)*col1]);
            A22=-A22';
            A22=reshape(A22,[1,(row1-1)*col1]);
            A=[A11;A22];
            t2=t1-A111(i,j);
            B=[t2,-t2];
            aeq=zeros(row1-1,row1);
            beq=ones(row1-1,1);    
            for k=1:row1-1
              for l=(k-1)*col1+1:col1*k
               aeq(k,l)=1;       %Ae，Be为等式约束，前5行表示一个人只做一种工作，这里不需要后五行，后五行表示每一种工作只需要一个人做
               end
            end
            beq=ones(row1-1,1);
            %lb，ub上下界
            Lb=zeros((row1-1)*col1,1);
            Ub=ones((row1-1)*col1,1);
            [x1,z1]=linprog(C3,A,B,aeq,beq,Lb,Ub);
            x1=reshape(x1,[col1,row1-1]);
            x1=x1';
            Z1=z1+C4(i,j);
            if(cm==1)
                Z2=Z1;
                cn=j;
            end
            if (Z1<Z2)
                Z2=Z1;
                cn=j;
            end
            cm=cm+1;
            clear C3 A11 A22 aeq beq z1;   
        end
        
%         if (Z1<Z(2))
%             Z(2)=Z1;  %更新边界
%             cn=j;
%         end
     end
    end
    %比较完一行后，对原速度改变量矩阵进行更新  ,将i行cn列修改为1，第i行其余位置为0    
    X(i,:)=0;
    X(i,cn)=1;
    C2(1,:)=[];
    t1=t1-A1(1,cn);
    t2=t1;
    A1(1,:)=[];
    A2(1,:)=[];
end
z1=0;
q1=0;
for i=1:row
    for j=1:col
        if ((abs((X(i,j)-1))<1e-8))
            z1=C4(i,j)+z1;
            q1=q1+A_old(i,j);
        end
    end
end


toc
disp(['运行时间: ',num2str(toc)]);

