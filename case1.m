%Optimal scheduling for satellite refuelling in circular
%orbits,无视下降段，并将前后的恒稳段拼接起来，具体见论文里面
%四个例子中，C为速度变化量矩阵，a1，a2为每个恒稳区域的始末端点矩阵
tic
C=[0.523539301369051,0.279157339691839,0.190349816013528,0.144414154227354,0.116340269414778;
    0.523539301369051,0.279157339691839,0.190349816013528,0.144414154227354,0.116340269414778;
    0.523539301369051,0.279157339691839,0.190349816013528,0.144414154227354,0.116340269414778;
    0.523539301369051,0.279157339691839,0.190349816013528,0.144414154227354,0.116340269414778;
    0.523539301369051,0.279157339691839,0.190349816013528,0.144414154227354,0.116340269414778;
    0.523539301369051,0.279157339691839,0.190349816013528,0.144414154227354,0.116340269414778;
    0.523539301369051,0.279157339691839,0.190349816013528,0.144414154227354,0.116340269414778];
%C是燃料消耗，为第一个卫星加注时的第一个恒稳区间的燃料消耗


C=C';
C=C( : );
%a，b不等式约束 ,此处考虑怎么将总的时间与xij联系起来  a1，a2分别为恒稳区间的起始和结束时间组成的矩阵
 a1=[0.266597705750859,1.90659770575086,2.97659770575086,4.00659770575086,5.02659770575086;
     0.266597705750859,1.90659770575086,2.97659770575086,4.00659770575086,5.02659770575086;
     0.266597705750859,1.90659770575086,2.97659770575086,4.00659770575086,5.02659770575086;
     0.266597705750859,1.90659770575086,2.97659770575086,4.00659770575086,5.02659770575086;
     0.266597705750859,1.90659770575086,2.97659770575086,4.00659770575086,5.02659770575086;
     0.266597705750859,1.90659770575086,2.97659770575086,4.00659770575086,5.02659770575086;
     0.266597705750859,1.90659770575086,2.97659770575086,4.00659770575086,5.02659770575086];
     
 a2=[1.90659770575086,2.97659770575086,4.00659770575086,5.02659770575086,6.03659770575086;
     1.90659770575086,2.97659770575086,4.00659770575086,5.02659770575086,6.03659770575086;
     1.90659770575086,2.97659770575086,4.00659770575086,5.02659770575086,6.03659770575086;
     1.90659770575086,2.97659770575086,4.00659770575086,5.02659770575086,6.03659770575086;
     1.90659770575086,2.97659770575086,4.00659770575086,5.02659770575086,6.03659770575086;
     1.90659770575086,2.97659770575086,4.00659770575086,5.02659770575086,6.03659770575086;
     1.90659770575086,2.97659770575086,4.00659770575086,5.02659770575086,6.03659770575086];
a1=a1';
a1=reshape(a1,[1,35]);
a2=-a2';
a2=reshape(a2,[1,35]);
a=[a1;a2];
b=[15.6,-15.6];   %这里的240是真实时间，单位是小时，除此以外其它燃耗，时间都是归一化以后的
%b=[240*3600/k2,-240*3600/k2];
%Aeq，Beq等式约束
Aeq=zeros(7,5);
for i=1:7
   for j=(i-1)*5+1:5*i
      Aeq(i,j)=1;       %Ae，Be为等式约束，前5行表示一个人只做一种工作，这里不需要后五行，后五行表示每一种工作只需要一个人做
   end
end
Beq=ones(7,1);
%lb，ub上下界
lb=zeros(35,1);
ub=ones(35,1);
for i=1:35
    intcon(i)=i;
end
[x,z]=intlinprog(C,intcon,a,b,Aeq,Beq,lb,ub);
x=reshape(x,[5,7]);
x=x';
y=round(reshape(x,[5,7]));   %从此之下应该使用整数规划，分支定界法
y=y';
toc
disp(['运行时间: ',num2str(toc)]);